{
  settings: {
    credentials: {
      editable: true,
      exposed: true,
      emailservice: {
        value: "gmail",
        description: "default is gmail, see nodemailer reference for other clients - https://github.com/andris9/Nodemailer"
      },
      email: {
        value: "____@gmail.com",
        description: "put your gmail address here - this will also be used to send SMS (SMS via email)"
      },
      emailpass: {
        value: "____",
        password: true,
        description: "put your gmail password or app access code here"
      },
      emailAlertsTo: {
        value: "____@gmail.com",
        description: "put your alert/notification email here (can be the same as above)"
      },
      smsAlertsTo: {
        value: "____",
        description: "if you want SMS notifications, fill this in with your phone number (it's your cell#, domain differs for each carrier, ex: 5551234567@vtext.com for verizon, or 5551234567@txt.att.net for at&t)"

      },
      adbSmsAlertsTo: {
        value: "____"
      },
      adbCallsAlertsTo: {
        value: "____"
      }
    },
    serial: {
      editable: true,
      exposed: true,
      port: {
        value: "/dev/ttyAMA0",
        description: "replace this with whatever serial port you have on your Pi/gateway (ttyAMA0 is the default GPIO serial port). If you use a MoteinoUSB then your Pi will emulate a serial port like /dev/ttyUSB0"
      },
      baud: {
        value: 19200,
        description: "needs to match the Serial baud speed in the sketch running on the Moteino or MightyHat that is attached to this Pi"
      }
    },
    database: {
      editable: false,
      exposed: false,
      name: {
        value: "gateway.db",
        description: "where your node information is stored, should not really be changed"
      },
      nonMatchesName: {
        value: "gateway_nonmatches.db",
        description: "where non match node information is dumped, should not really be changed"
      },
      compactDBInterval: {
        value: 86400000,
        description: "the gateway.db database is compacted every this many milliseconds, default = once every day"
      }
    },
    general: {
      editable: true,
      exposed: true,
      consoleLogDateFormat: {
        value: "mm-dd-yy_HH:MM:ss.l",
        exposed: false
      },
      socketPort: {
        value: 8080,
        editable: false,
        description: "the port at which the gateway.js socket app is listening"
      },
      genNodeIfNoMatch: {
        value: "false",
        description: "generate a new node even if the data received does not match any metric definition, default = false"
      },
      keepMetricLogsOnDelete: {
        value: "true",
        description: "keep the metric binary logs when metric is deleted, default = false"
      },
      graphMaxPoints: {
        value: 800,
        description: "display up to this many points in the UI, should not be more than your monitor resolution"
      },
      smsRepeatLimit: {
        value: 180000,
        description: "an SMS will only be repeated after this many milliseconds. Helps to limit repeats for things like repeated motion or alerts"
	  },
      limitLowBatteryMessages: {
        value: 3600000,
         description: "an email will only be repeated after this many milliseconds. Helps to limit low battery alerts."
      },
      limitOflineMessages: {
        value: 3600000
      },
      clockUpdateDelay:{
        value: 10000,
        description: "Server clock will be updated only after this many milliseconds."
      }
    },
    radiothermostat: {
      editable: true,
      exposed: true,
      ip: {
        value: "192.168.1.100"
      }
    },
    smartthermostat: {
      editable: true,
      exposed: true,
      nodeId: {
        value: 300
      },
      temperatureDiferential: {
        value:0.5,
        description: "temperature histeresis"
      },
      thermostatworkerofffset: {
        value:60000,
        description: "the thermostat worker will run after this many milis"
      },
      heatNodeId: {
        value:0
      },
      coolNodeId: {
        value:0
      }
    },
    meteoforecast: {
      editable: true,
      exposed: true,
      nodeId: {
        value: 400
      }
    },
    smartalarm: {
      editable: true,
      exposed: true,
      nodeId: {
        value: 200
      },
      limitMotionMessage: {
        value: 30000
      },
      alarmDelay:{
        value: 20000
      },
      autoarmperiod:{
        value: 3600000,
        description: "Smart alarm wil autoarm after this many milis"
      }
    }
    
  }
}